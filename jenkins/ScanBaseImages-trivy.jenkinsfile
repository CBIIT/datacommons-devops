@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			label 'cicd_microservice'
		}
	}

  parameters {

  string(defaultValue: "", 
        description: 'Enter a list of email addresses to notify with results:', 
        name: 'EmailRecipients')

  }
  
  environment {

 	CODE_REPO   = "datacommons-devops"
    CODE_FOLDER = "datacommons-devops"
 	CODE_BRANCH = "base_images_trivy"

	ECR_REPO    = "cbiit-base-docker-images"
	REGION      = "us-east-1"

  }

  stages{
  	stage('checkout'){
  		steps {

		checkout([$class: 'GitSCM',
			branches: [[name: "${env.CODE_BRANCH}"]],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.CODE_FOLDER}"]],
			userRemoteConfigs:
			[[url: "https://github.com/CBIIT/${env.CODE_REPO}"]]])

        }

  	}

	// stage('Image Scans'){

 	// 	steps {

 	// 		//withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'DOCKER_PASSWORD', usernameVariable: 'DOCKER_USER')]){
			
	// 		script {

	// 			def SCANNED_IMAGES = []
	// 			def image_list = readFile("${WORKSPACE}/${CODE_FOLDER}/docker/base_image_list").readLines()

	// 			image_list.each { String image ->

	// 				println image

	// 				//sh(label: 'Pull Image', returnStdout: true, script: "docker pull $image")

	// 				//SCAN_RESULT = sh(label: 'Get Scan Results', returnStdout: true, script: "docker run -e DOCKER_SCOUT_HUB_USER=$DOCKER_USER -e DOCKER_SCOUT_HUB_PASSWORD=\"$DOCKER_PASSWORD\" docker/scout-cli cves --only-severity critical,high,medium $image").trim()
	// 				//SCAN_RESULT = sh(label: 'Get Scan Results', returnStdout: true, script: "docker run --rm --name trivy -u root -v /var/run/docker.sock:/var/run/docker.sock bitnami/trivy:latest image --exit-code 1 --timeout 15m --severity HIGH,CRITICAL $image || true").trim()
	// 				SCAN_RESULT = sh(label: 'Get Scan Results', returnStdout: true, script: "docker run --rm --name trivy -u root -v /var/run/docker.sock:/var/run/docker.sock bitnami/trivy:latest image --timeout 15m --severity HIGH,CRITICAL $image").trim()

	// 				//SCANNED_IMAGES.add("\n\n\n##########   SCANNING IMAGE:   $image   ##########\n\n\n")
	// 				SCANNED_IMAGES.add(SCAN_RESULT)

	// 			}

	// 			println "RESULTS:    "
				
	// 			SCANNED_IMAGES.each { String results ->

	// 			    println results

	// 			}

	// 			//emailext(mimeType: 'text/plain',
	// 			//	body: "${SCANNED_IMAGES}",
	// 			//	subject: 'Base Image Scans: results attached',
	// 			//	to: "${params.EmailRecipients}")
	

	// 		}

	// 		//}
	// 	}

  	// }

   stage('Image Scans'){

 		steps {

 			script {

			    def image_list = readFile("${WORKSPACE}/${CODE_FOLDER}/docker/base_image_list").readLines()
				
				//sh(label: 'Get Scan Results', returnStdout: true, script: "docker run --rm --name trivy -u root -v /var/run/docker.sock:/var/run/docker.sock bitnami/trivy:latest image --timeout 15m --severity HIGH,CRITICAL $image").trim()
				
				RESULTS = sh label: 'Get Scan Results', returnStdout: true, script: """#!/bin/bash
				
				echo $image_list

				for image in $image_list; do
                    echo "the next image is $image"

					#docker run --rm --name trivy -u root -v /var/run/docker.sock:/var/run/docker.sock bitnami/trivy:latest image --timeout 15m --severity HIGH,CRITICAL \$image
					
                done

				""".trim()

				println RESULTS

			}

 		}

  	}


  }

  post {

    // always {
	
	//     notify(
    //         secretPath: "notification/slack",
    //         secretName: "${env.SLACK_SECRET}"
    //     ) 

    // }

    cleanup {

        cleanWs()

    }

  }

}