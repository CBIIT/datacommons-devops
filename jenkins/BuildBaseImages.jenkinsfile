@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			label 'cicd_microservice'
		}
	}

  options {
	timestamps()
  }

  environment {

	CODE_REPO    = "datacommons-devops"
	CODE_BRANCH  = "base_image_pipeline"
    CODE_FOLDER  = "datacommons-devops"

  }

  stages{
  	stage('checkout'){
  		steps {

		checkout([$class: 'GitSCM',
			branches: [[name: "${env.CODE_BRANCH}"]],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.CODE_FOLDER}"]],
			userRemoteConfigs:
			[[url: "https://github.com/CBIIT/${env.CODE_REPO}"]]])

        }

  	}

	stage('Get Dockerfiles To Build'){

 		steps {

 			script {

                files = findFiles(glob: 'docker/base_images/*')

				fileList = []
				files.each {
				  fileList.add(it.getName())
                }

			    env.FILE_LIST = input message: 'Select Images To Build', 
			        parameters: [extendedChoice(multiSelectDelimiter: ',', 
				    name: 'Images_to_Build', 
				    quoteValue: false, 
				    saveJSONParameterToFile: false, 
				    type: 'PT_MULTI_SELECT', 
				    value: fileList.join(','), 
				    visibleItemCount: 5)]

			}

 		}

  	}
	
	stage('Build'){

 		steps {

			script {

				env.FILE_LIST.split(',').collect{it}.each {
				 	println "BUILDING CONTAINER: " + it

					sh label: 'Docker-Build', script: """#!/bin/bash
					
					    #echo "Building: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"

						echo "Building: $it"
					
					    """



				 }

			}

 			// script {

			//     sh label: 'Docker-Build', script: '''#!/bin/bash

			// 	# build CTDC Docker container
			// 	echo "Building: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"

			// 	cd $WORKSPACE/$CODE_FOLDER && DOCKER_BUILDKIT=1 docker build --no-cache -t $REPO_URL:$CODE_BRANCH.$BUILD_NUMBER .

			// 	'''

			// }

 		}

  	}

  	// stage('push to ECR'){

 	// 	steps {

 	// 		script {

	// 		    sh label: 'Docker-Push', script: '''#!/bin/bash

	// 			# push CTDC Docker container to ECR
	// 			echo "Pushing: $ECR_REPO:$CODE_BRANCH.$BUILD_NUMBER"

	// 			# login and push to ECR
	// 			docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $REPO_URL
	// 			docker push $REPO_URL:$CODE_BRANCH.$BUILD_NUMBER

    //             # tag as latest and push to ECR
	// 			docker tag $REPO_URL:$CODE_BRANCH.$BUILD_NUMBER $REPO_URL:latest
    //             docker push $REPO_URL:latest

	// 			'''

	// 		}

 	// 	}

  	// }

  }

  post {

    // always {

    //     notify(
    //         secretPath: "notification/slack",
    //         secretName: "${env.SLACK_SECRET}"
    //     ) 

    // }

    cleanup {

        cleanWs()

    }

  }

}