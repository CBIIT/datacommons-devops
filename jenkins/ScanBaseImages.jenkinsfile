@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			//label 'cicd_microservice'
			label 'slave-ccdc-nciws-d2425-c'
		}
	}

  options {
	timestamps()
  }

  environment {

// 	ECR_REPO    = "cbiit-base-docker-images"
 	CODE_REPO   = "datacommons-devops"
    CODE_FOLDER = "datacommons-devops"
 	CODE_BRANCH = "base_image_pipeline"
// 	REGION      = "us-east-1"

  }

  stages{
  	stage('checkout'){
  		steps {

		checkout([$class: 'GitSCM',
			branches: [[name: "${env.CODE_BRANCH}"]],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.CODE_FOLDER}"]],
			userRemoteConfigs:
			[[url: "https://github.com/CBIIT/${env.CODE_REPO}"]]])

        }

  	}

	// stage('set variables'){

    //     steps {

  	// 	    script {

    //             // set date string to use for tag
	// 			Date date = new Date()
	// 			env.DATE_STRING = date.format("yyyyMMddHHmm")

	// 			// set ECR account number
	// 			//env.ECR_ACCOUNT = sh(label: 'Get ECR account', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id bento/$PROJECT/$ENV --query SecretString --output text | jq -r '.ecr_account'").trim()
	// 			env.ECR_ACCOUNT = sh(label: 'Get ECR account', returnStdout: true, script: "aws sts get-caller-identity --query \"Account\" --output text").trim()

	// 			// set repo URL
	// 			env.REPO_URL = "${ECR_ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}"

	// 		}

    //     }

  	// }
	
	// stage('Get Dockerfiles To Build'){

 	// 	steps {

 	// 		script {

    //             files = findFiles(glob: 'docker/base_images/*')

	// 			fileList = []
	// 			files.each {
	// 			  fileList.add(it.getName())
    //             }

	// 		    env.FILE_LIST = input message: 'Select Images To Build', 
	// 		        parameters: [extendedChoice(multiSelectDelimiter: ',', 
	// 			    name: 'Images_to_Build', 
	// 			    quoteValue: false, 
	// 			    saveJSONParameterToFile: false, 
	// 			    type: 'PT_MULTI_SELECT', 
	// 			    value: fileList.join(','), 
	// 			    visibleItemCount: 5)]

	// 		}

 	// 	}

  	// }
	
	// stage('Build'){

 	// 	steps {

	// 		script {

	// 			env.FILE_LIST.split(',').collect{it}.each {

	// 				sh label: 'Docker-Build', script: """#!/bin/bash

	// 					echo "Building: $it"

	// 					cd $WORKSPACE/$CODE_FOLDER/docker/base_images && DOCKER_BUILDKIT=1 docker build --no-cache -t $REPO_URL:$it.$DATE_STRING -f $it .
					
	// 				    """

	// 			 }

	// 		}

 	// 	}

  	// }

  	stage('Image Scans'){

 		steps {

 			script {

			    //ECR_LOGIN = sh(label: 'ECR Login', returnStdout: true, script: "docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $REPO_URL").trim()
				
				//env.FILE_LIST.split(',').collect{it}.each {

				def image_list = readFile("${WORKSPACE}/${CODE_FOLDER}/docker/base_images/base_image_list").readLines()

				image_list.each { String image ->

					println image

					//SCAN_RESULT = sh(label: 'Get Scan Results', returnStdout: true, script: "docker scout quickview $image").trim()

					SCAN_RESULT = sh(label: 'Get Scan Results', returnStdout: true, script: "docker --version").trim()

					println SCAN_RESULT

				}

					// sh label: 'Docker-Scan', script: '''#!/bin/bash

					// 	images=$(cat $WORKSPACE/$CODE_FOLDER/docker/base_images/base_image_list)
						
					// 	for i in $images
					// 	do 
						
					// 	    echo "Scanning: $i"

					// 	done

					// 	# login and push to ECR
					// 	#docker login -u AWS -p \$(aws ecr get-login-password --region $REGION) $REPO_URL
					// 	#docker push $REPO_URL:$it.$DATE_STRING

					//     '''

				 //}

			}

 		}

  	}

  }

  post {

    // always {

    //     notify(
    //         secretPath: "notification/slack",
    //         secretName: "${env.SLACK_SECRET}"
    //     ) 

    // }

    cleanup {

        cleanWs()

    }

  }

}