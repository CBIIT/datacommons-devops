@Library('datacommons-jenkins-shared-library@v1.2') _

def getLabelForEnvironment(environment) {
	if (environment == "stage" || environment == "prod"){
		return ""     // Set to use a Jenkins agent in your prod account
	}else {
		return ""     // Set to use a Jenkins agent in your nonprod account
	}
}

pipeline {
	agent {
		node {
			label getLabelForEnvironment(params.Environment)
		}
	}

	parameters {

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to build',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

        gitParameter(branchFilter: 'origin/(.*)',
            defaultValue: 'master',
            name: 'CodeBranch',
            type: 'GitParameterDefinition',
            quickFilterEnabled: true,
            selectedValue: 'DEFAULT',
            sortMode: 'ASCENDING_SMART',
            tagFilter: '*',
            useRepository: '')  // Set to the repo URL that you are building

        booleanParam(
            defaultValue: true,
            name: 'UpdateDeploymentVersion')

        booleanParam(
            defaultValue: true,
            name: 'RunDeployStage')

  }

  options {
  	ansiColor('xterm')
	timestamps()
  }

  environment {

      PROJECT      = ""   // set to your project name
	  SERVICE      = ""   // set to your service name
	  ECR_REPO     = ""   // set to your ECR repo name
	  DEPLOY_JOB   = ""   // set to your deploy job name
	  SLACK_SECRET = ""   // set to your slack secret name
	  CODE_REPO    = ""   // set to your code repo name - NOTE: this is just the name of the repo and not the full URL
	  JOB_PATH     = ""   // set to the base path of the build/deploy jobs you are using
	  REGION       = "us-east-1"
	  DEPLOY_REPO  = "${env.PROJECT}-deployments"
      CODE_BRANCH  = "${params.CodeBranch}"
      CODE_FOLDER  = "${env.PROJECT}-${env.SERVICE}"

  }

  stages{
  	stage('checkout'){
  		steps {

		checkout([$class: 'GitSCM',
			branches: [[name: "${env.CODE_BRANCH}"]],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.CODE_FOLDER}"]],
			userRemoteConfigs:
			[[url: "https://github.com/CBIIT/${env.CODE_REPO}"]]])

  		checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			userRemoteConfigs:
			[[url: "https://github.com/CBIIT/${env.DEPLOY_REPO}"]]])

  		checkout([$class: 'GitSCM',
			branches: [[name: '*/main']],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "playbooks"]],
			userRemoteConfigs:
			[[url: "https://github.com/CBIIT/${env.DEPLOY_REPO}"]]])

        }

  	}

  	stage('Build'){

        agent {
            docker {
                image 'cbiitssrepo/cicd-ansible_4.0'
                args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

 		steps {
 			wrap([$class: 'AnsiColorBuildWrapper', colorMapName: "xterm"]) {
                ansiblePlaybook(
					playbook: "${WORKSPACE}/playbooks/ansible/playbooks/build-files-microservice.yml", 
            		inventory: "${WORKSPACE}/playbooks/ansible/playbooks/hosts",
                    extraVars: [
						project_name: "${PROJECT}",
						auth_enabled: false
						],
                    colorized: true)
 			}
 		}

  	}

  	stage('Update Deployment Manifest'){

 		steps {
 			
			script {
                if (params.UpdateDeploymentVersion) {
                    writeDeployment(
                        version: "${env.CODE_BRANCH}.${BUILD_NUMBER}",
                        image:  "${env.CODE_BRANCH}.${BUILD_NUMBER}",
                        service: "${env.SERVICE}",
                        deploymentFile: "${env.PROJECT}-deployments/deployments.yaml",
                        deploymentRepoUrl: "https://github.com/CBIIT/${env.DEPLOY_REPO}",
                        deploymentCheckoutDirectory: "${env.PROJECT}-deployments"
                    )
                }
            }

 		}

  	}

  	stage('Update Code Tag'){

 		steps {
 			
			script {

                tagRepo ( 
                    gitTag: "${env.PROJECT}-${env.CODE_BRANCH}",
                    gitUrl: "github.com/CBIIT/${env.CODE_REPO}",
                    checkoutDirectory: "${env.PROJECT}-${env.SERVICE}"
                )

            }

 		}

  	}

  }

  post {

    success {

		script {
			if (params.RunDeployStage) {
				echo 'Run the deployment for this sevice'
				build job: "$JOB_PATH/$DEPLOY_JOB", parameters: [string(name: 'ImageTag', value: "$CODE_BRANCH.$BUILD_NUMBER"), extendedChoice(name: 'Environment', value: "${params.Environment}")]
			}
		}
    }

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}