@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			label ''   // Set to use a Jenkins agent in your desired account
		}
	}

	parameters {

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to deploy to',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

  }

  options {

	timestamps()

  }

  environment {

	PROJECT      = ""     // set to your project name
    JOB_PATH     = ""   // set to the base path of the build/deploy jobs you are using - NOTE: relative paths should be used here
	SLACK_SECRET = ""     // set to your slack secret name

  }

  stages{

  	stage('checkout'){

  		steps {

		checkout([$class: 'GitSCM',
			branches: [[name: "${params.Environment}"]],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			userRemoteConfigs:
			[[url: "https://github.com/CBIIT/${env.DEPLOY_REPO}"]]])

        }

  	}

  	stage('Deploy'){

        agent {
            docker {
                image 'cbiitssrepo/cicd-ansible_4.0'
                args '--net=host -u root -v /var/run/docker.sock:/var/run/docker.sock'
                reuseNode true
            }
        }

 		steps {

            script {

                def deployment = readYaml file: "${WORKSPACE}/${PROJECT}-deployments/deployments.yaml"
                deployment.services.each {
                    buildJob(
                        jobName: "${JOB_PATH}/Deploy" + "${it.key}".capitalize(),
                        parameters:[
                                string(name: 'Environment', value: params["Environment"]),
                                string(name: 'ImageTag' , value: it.value.image)
                        ]
                    )
                }
		    }

 		}

  	}

  }

  post {

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}