@Library('datacommons-jenkins-shared-library@v1.1') _

pipeline {
	agent {
		node {
			label ''   // Set to use a Jenkins agent in your desired account
		}
	}

	parameters {

        string(
            defaultValue: '',
            description: 'The Image to Deploy',
            name: 'ImageTag')

        extendedChoice(
            name: 'Environment',
            defaultValue: 'dev',
            description: 'Choose the environment to deploy to',
            type: 'PT_SINGLE_SELECT',
            value: 'dev,qa,stage,prod')

  }

  options {

	timestamps()

  }

  environment {

	PROGRAM      = ""     // set to your program name (crdc, ccdi)
	PROJECT      = ""     // set to your project name
	APP          = ""     // set to the name of the service you are deploying
	SLACK_SECRET = ""     // set to your slack secret name
	REGION       = "us-east-1"
	DEPLOY_REPO  = "${env.PROJECT}-deployments"
	ECR_REPO     = "${env.PROGRAM}-${env.PROJECT}-${env.APP}"
	IMAGE_TAG    = "${params.ImageTag}"
	ENV          = "${params.Environment}"
	CLUSTER      = "${env.PROJECT}-${env.ENV}-ecs"
	SERVICE = "${env.PROJECT}-${env.ENV}-${env.APP}"

  }

  stages{

  	stage('checkout'){

  		steps {

  		checkout([$class: 'GitSCM',
			branches: [[name: '*/main']],
			extensions: [[$class: 'SubmoduleOption', 
			recursiveSubmodules: true],
			[$class: 'RelativeTargetDirectory',
			relativeTargetDir: "${env.PROJECT}-deployments"]],
			userRemoteConfigs:
			[[url: "https://github.com/CBIIT/${env.DEPLOY_REPO}"]]])

        }

  	}

    stage('Set Environment Variables'){

 		steps {

 			script {

			    // set sumo vars for logging
				env.SUMO_COLLECTOR_ENDPOINT = sh(label: 'Get Sumo Endpoint', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id bento/$PROJECT/$ENV --query SecretString --output text | jq -r '.sumo_collector_endpoint'").trim()
				env.SUMO_COLLECTOR_TOKEN = sh(label: 'Get Sumo Token', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id bento/$PROJECT/$ENV --query SecretString --output text | jq -r '.sumo_collector_token_$APP'").trim()

				// set neo4j vars
				env.NEO4J_HOST = sh(label: 'Get Neo4j Host', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id bento/$PROJECT/$ENV --query SecretString --output text | jq -r '.neo4j_ip'").trim()

				// set ECR account number
				env.ECR_ACCOUNT = sh(label: 'Get ECR account', returnStdout: true, script: "aws secretsmanager get-secret-value --region $REGION --secret-id bento/$PROJECT/$ENV --query SecretString --output text | jq -r '.ecr_account'").trim()

				// set repo URL
				env.REPO_URL = "${ECR_ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO}"

				// set template file name
				env.TEMPLATE_FILE="ctdc-deployments/aws/${APP}_task.json"

			}

 		}

  	}

  	stage('Update Task Definition'){

 		steps {

			script {

			    sh label: 'Task-Definition-Update', script: '''#!/bin/bash

				# create new revision for $PROJECT-$APP Task Definition
				echo "Updating Task Defintion to Use: $ECR_REPO:$IMAGE_TAG"
				ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
				IMAGE_ID="$REPO_URL:$IMAGE_TAG"

				sed -i "s|{{account_id}}|$ACCOUNT_ID|" $TEMPLATE_FILE
				sed -i "s|{{image_id}}|$IMAGE_ID|" $TEMPLATE_FILE
				sed -i "s|{{image_tag}}|$IMAGE_TAG|" $TEMPLATE_FILE
				sed -i "s|{{environment}}|$ENV|" $TEMPLATE_FILE
				sed -i "s|{{project}}|$PROJECT|" $TEMPLATE_FILE
				sed -i "s|{{sumo_collector_endpoint}}|$SUMO_COLLECTOR_ENDPOINT|" $TEMPLATE_FILE
				sed -i "s|{{sumo_collector_token}}|$SUMO_COLLECTOR_TOKEN|" $TEMPLATE_FILE
				sed -i "s|{{neo4j_host}}|$NEO4J_HOST|" $TEMPLATE_FILE

				aws ecs register-task-definition --cli-input-json file://$TEMPLATE_FILE

				'''

			}

 		}

  	}

    stage('Update Service'){

 		steps {

 			script {

			    sh label: 'Service-Update', script: '''#!/bin/bash

				# Redeploy Service Using The Latest Task Definition
				echo "Updating Service: $SERVICE"

				TASK_REVISION=$(aws ecs describe-task-definition --task-definition $SERVICE | egrep "revision" | awk '{print $2}' | sed 's/,//')
				aws ecs update-service --cluster $CLUSTER --region $REGION --service $SERVICE --task-definition $SERVICE:$TASK_REVISION --desired-count 1

				'''

			}

 		}

  	}

	stage('Add Production Tag'){

 		when {

	        expression { 

                ENV == 'prod'

            }

        }

		steps {

 			script {

			    sh label: 'Docker-Tag', script: '''#!/bin/bash

				# Tag image as production if deploying to prod tier
				echo "Tagging Image as Production: $ECR_REPO:$IMAGE_TAG"

				# login and get manifest
				docker login -u AWS -p $(aws ecr get-login-password --region $REGION) $REPO_URL
				MANIFEST=$(aws ecr batch-get-image --repository-name $ECR_REPO --image-ids imageTag=$IMAGE_TAG --output json | jq --raw-output --join-output '.images[0].imageManifest')

                # tag as latest and push to ECR
				aws ecr put-image --repository-name $ECR_REPO --image-tag production-$IMAGE_TAG --image-manifest "$MANIFEST"

				'''

			}

 		}

  	}

  }

  post {

    always {

        notify(
            secretPath: "notification/slack",
            secretName: "${env.SLACK_SECRET}"
        ) 

    }

    cleanup {

        cleanWs()

    }

  }

}