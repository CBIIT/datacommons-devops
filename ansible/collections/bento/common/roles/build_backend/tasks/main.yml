############################################################################################################################
#     Backend Build
############################################################################################################################

- name: remove the application_example.properties file
  file:
    path: "{{ workspace }}/src/main/resources/application_example.properties"
    state: absent

- name: copy application.properties file to /src/main/resources/
  template:
    src: "{{ workspace }}/src/main/resources/application.properties.j2"
    dest: "{{ workspace }}/src/main/resources/application.properties"

- name: create graphql directory in backend
  file:
    state: directory
    path: "{{ workspace }}/src/main/resources/graphql"

- name: create yaml directory in backend
  file:
    state: directory
    path: "{{ workspace }}/src/main/resources/yaml"

#- name: copy schema from frontend to resources
  #template:
  #  remote_src: yes
   # src: "{{ item.src }}"
    #dest: "{{ item.dest }}"
  #loop:
   # - { src: "{{ workspace }}/{{ project_name }}-frontend/graphql/{{ public_schema_file }}",dest: "{{ workspace }}/src/main/resources/graphql/{{ public_schema_file }}"}

##### Redis

- name: verify redis schema file exists
  stat:
    path: "{{ workspace }}/bento-frontend/graphql/{{ redis_schema_file }}"
  register: redis_schema

- name: verify redis init queries file exists
  stat:
    path: "{{ workspace }}/bento-frontend/yaml/{{ redis_init_queries_file }}"
  register: redis_queries

- name: copy redis schema from frontend to resources
  template:
    src: "{{ workspace }}/bento-frontend/graphql/{{ redis_schema_file }}"
    dest: "{{ workspace }}/src/main/resources/graphql/{{ redis_schema_file }}"
  when: redis_schema.stat.exists

- name: copy redis init queries from frontend to resources
  template:
    src: "{{ workspace }}/bento-frontend/yaml/{{ redis_init_queries_file }}"
    dest: "{{ workspace }}/src/main/resources/yaml/{{ redis_init_queries_file }}"
  when: redis_queries.stat.exists

##### Redis

- name: verify test queries file exists
  stat:
    path: "{{ workspace }}/bento-frontend/yaml/{{ test_queries_file }}"
  register: test_queries

- name: copy test queries from frontend to resources
  template:
    remote_src: yes
    src: "{{ workspace }}/bento-frontend/yaml/{{ test_queries_file }}"
    dest: "{{ workspace }}/src/main/resources/yaml/{{ test_queries_file }}"
  when: test_queries.stat.exists

- name: build springboot code
  command: mvn package -DskipTests
  args:
    chdir: "{{ workspace }}"

- name: copy Bento-0.0.1.war to ROOT.war
  copy:
    remote_src: yes
    src: "{{ workspace }}/target/Bento-0.0.1.war"
    dest: "{{ workspace }}/target/ROOT.war"

- name: build {{ project_name }}-{{ container_name }} image
  community.docker.docker_image:
    build:
      args:
        ECR_REPO: "{{ container_registry_url }}"
      path: "{{ workspace }}"
      dockerfile: "{{ dockerfile_path }}"
      pull: yes
      nocache: yes
    name: "{{ project_name }}-{{ container_name }}"
    tag: "{{ image_version }}.{{ build_number }}"
    push: no
    force_source: yes
    source: build

- name: test image for vulnerabilities
  block:
    - name: run trivy scanner on {{ project_name }}-{{ container_name }}:{{ image_version }}.{{ build_number }}
      #command: "trivy image --exit-code 1 --severity HIGH,CRITICAL {{ project_name }}-{{ container_name }}:{{ image_version }}-{{ build_number }}"
      command: "trivy image --timeout 15m --severity HIGH,CRITICAL {{ project_name }}-{{ container_name }}:{{ image_version }}.{{ build_number }}"
      register: vuln_results
  always:
    - name: echo vulnerability results
      debug:
        msg: "{{ vuln_results.stdout_lines }}"

- name: Add {{ project_name }}-{{ container_name }} image to ECR
  community.docker.docker_image:
    name: "{{ project_name }}-{{ container_name }}"
    repository: "{{ container_registry_url }}/{{ project_name }}-{{ container_name }}"
    tag: "{{ image_version }}.{{ build_number }}"
    force_tag: yes
    push: yes
    source: local

- name: Add tag latest to {{ project_name }}-{{container_name}} image
  community.docker.docker_image:
    name: "{{ container_registry_url }}/{{ project_name }}-{{ container_name }}:{{ image_version }}.{{build_number}}"
    repository: "{{ container_registry_url }}/{{ project_name }}-{{ container_name }}:latest"
    force_tag: yes
    push: yes
    source: local
