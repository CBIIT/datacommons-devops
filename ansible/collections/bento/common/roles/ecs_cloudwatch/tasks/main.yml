---
- name: create task definition for {{ project_name }}-{{ container_name }}
  community.aws.ecs_taskdefinition:
    containers:
      - name: sumologic-firelens
        essential: true
        image: "public.ecr.aws/aws-observability/aws-for-fluent-bit:latest"
        memory: 100
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: "/ecs/{{ project_name }}/{{ tier }}/sumologic/logs"
            awslogs-region: "{{ region }}"
            awslogs-create-group: "true"
            awslogs-stream-prefix: "{{ project_name }}-{{ container_name }}"
      - name: "{{ program }}-{{ project_name }}-{{ microservice }}"
        essential: true
        image: "{{ container_image_url }}:{{ image_version }}"
        environment: "{{ container_env }}"
        entryPoint: "{% if container_entrypoint is defined %}{{ container_entrypoint }}{% else %}[]{% endif %}"
        portMappings:
          - containerPort: "{{ container_port }}"
            hostPort: "{{ container_port }}"
        logConfiguration:
          logDriver: awslogs
          options:
            awslogs-group: "/ecs/{{ project_name }}/{{ tier }}/logs"
            awslogs-region: "{{ region }}"
            awslogs-create-group: "true"
            awslogs-stream-prefix: "{{ container_name }}"
    launch_type: FARGATE
    network_mode: awsvpc
    execution_role_arn: "arn:aws:iam::{{ account }}:role/{{ execution_role }}"
    task_role_arn: "arn:aws:iam::{{ account }}:role/{{ task_role }}"
    family: "{{ program }}-{{ tier }}-{{ project_name }}-{{ microservice }}"
    memory: "{{ container_memory }}"
    cpu: "{{ container_cpu }}"
    state: present
    force_create: true
    region: "{{ region }}"
  register: task_output

############################################################################################################################
#     Task Definition Queries
############################################################################################################################
- name: query task definition - {{ container_name }}
  ecs_taskdefinition_info:
    task_definition: "{{ program }}-{{ tier }}-{{ project_name }}-{{ microservice }}"
    region: "{{ region }}"
  register: task

############################################################################################################################
#     Service Queries
############################################################################################################################
- name: query {{ container_name }} service
  ecs_service_info:
    cluster: "{{ ecs_cluster_name }}"
    service: "{{ service_name }}"
    details: true
    region: "{{ region }}"
  register: service

- name: set facts
  set_fact:
    task_revision: "{{ task.revision }}"
    task_name: "{{ task.family }}"
    lb: "{{ service.services[0].loadBalancers }}"
    role_arn: "{{ service.services[0].roleArn }}"

###########################################################################################################################
#Update Services
############################################################################################################################
- name: update {{ container_name }} service
  ecs_service:
    state: present
    name: "{{ service_name }}"
    cluster: "{{ ecs_cluster_name }}"
    task_definition: "{{ task_name }}:{{ task_revision }}"
    role: "{{ role_arn }}"
    force_new_deployment: yes
    deployment_configuration:
      minimum_healthy_percent: 50
      maximum_percent: 200
      deployment_circuit_breaker:
        enable: true
        rollback: false
    desired_count: 1
    load_balancers: "{{ lb }}"
    region: "{{ region }}"
  register: output
