- name: create docker build directory
  file: 
    path: "{{ workspace }}/build"
    state : directory

- name: copy  nginx conf
  copy:
    remote_src: yes
    src: '{{ workspace }}/playbooks/docker/dockerfiles/nginx.conf'
    dest: '{{ workspace }}/build/nginx.conf'

- name: copy entrypoint.sh to workspace
  copy:
    src: "nginx-entrypoint.sh"
    dest: "{{ workspace }}/build/nginx-entrypoint.sh"
    mode: 0755

- name: check npm scripts
  block:
    - name: run npm install in {{ workspace }}/{{ project_name }}-frontend/
      command: "{{ item }}"
      args:
        chdir: "{{ container_build_path }}"
        warn: false
#      environment:
#        CI: false
#        NODE_OPTIONS: "--max-old-space-size=2048"
      loop:
        - pwd
        #- npm install npm@7.7.6 -g
        #- npm set progress=false
        #- /usr/local/bin/node --max-old-space-size=4096 /usr/local/bin/npm install --force --verbose
        #- npm install --silent
        - npm config ls -l
        - npm install --node-flags --max-old-space-size=4096 --verbose
        #- /usr/local/bin/node --max-old-space-size=2048 /usr/local/bin/npm run build
        - echo $NODE_OPTIONS
        - npm run build
      register: npm_out
  always:
    - name: echo npm output
      debug:
        msg: "{{ npm_out }}"

- name: move dist from frontend to temp build
  copy: 
    src: "{{ container_build_path }}/dist" 
    dest: "{{ workspace }}/build" 
    remote_src: yes 
    directory_mode: yes

- name: copy env to dist
  copy:
    src: inject.template.js
    dest: "{{ workspace }}/build/dist/inject.template.js"
    mode: 0755

- name: copy docker file to build path
  copy:
    remote_src: yes
    src: '{{ dockerfile_path }}'
    dest: '{{ workspace }}/build/Dockerfile'

- name: build {{ project_name }}-{{ container_name }} image
  community.docker.docker_image:
    build:
      args:
        ECR_REPO: "{{ container_registry_url }}"
      path: "{{ workspace }}/build"
      pull: yes
#      nocache: yes
    name: "{{ project_name }}-{{ container_name }}"
    tag: "{{ image_version }}.{{ build_number }}"
    push: no
    force_source: yes
    source: build
  environment:
    DOCKER_BUILDKIT: 1

- name: test image for vulnerabilities
  block:
    - name: run trivy scanner on 
      #command: "trivy image --exit-code 1 --severity HIGH,CRITICAL {{ project_name }}-{{ container_name }}:{{ image_version }}-{{ build_number }}"
      command: "trivy image --severity HIGH,CRITICAL {{ project_name }}-{{ container_name }}:{{ image_version }}.{{ build_number }}"
      register: vuln_results
  always:
    - name: echo vulnerability results
      debug:
        msg: "{{ vuln_results.stdout_lines }}"

- name: debug
  debug:
    msg: "{{ container_registry_url }}/{{ project_name }}-{{ container_name }}:{{ image_version }}.{{ build_number }}"

- name: Add {{ project_name }}-{{ container_name }} image to ECR
  community.docker.docker_image:
    name: "{{ project_name }}-{{ container_name }}"
    repository: "{{ container_registry_url }}/{{ project_name }}-{{ container_name }}"
    tag: "{{ image_version }}.{{ build_number }}"
    force_tag: yes
    push: yes
    source: local

- name: Add tag latest to {{ project_name }}-{{container_name}} image
  community.docker.docker_image:
    name: "{{ container_registry_url }}/{{ project_name }}-{{ container_name }}:{{ image_version }}.{{build_number}}"
    repository: "{{ container_registry_url }}/{{ project_name }}-{{ container_name }}:latest"
    force_tag: yes
    push: yes
    source: local